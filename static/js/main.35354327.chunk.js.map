{"version":3,"sources":["Title.js","DadJoke.js","BySykkel.js","Bikes.js","App.js","serviceWorker.js","index.js"],"names":["Title","DadJoke","useState","joke","setJoke","useEffect","fetch","then","response","json","data","children","className","title","selftext","BySykkel","sykkel","setSykkel","stations","num_bikes_available","num_docks_available","service","createEnturService","clientName","Bikes","bikeStations","setBikeStations","getBikeRentalStationsByPosition","latitude","longitude","map","station","key","id","Station","props","name","bikesAvailable","spacesAvailable","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"mOAQeA,G,YAND,WAEV,OAAO,4C,OCmBIC,EArBC,WAAO,IAAD,EAEMC,mBAAS,IAFf,mBAEXC,EAFW,KAELC,EAFK,KAYlB,OARAC,qBAAU,WACNC,MAAM,4DACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAIL,EAAQK,EAAKC,KAAKC,SAAS,GAAGD,WAE9C,IAIE,yBAAKE,UAAU,WACX,wCACA,2BAAIT,EAAKU,OACT,2BAAIV,EAAKW,YCKNC,EArBE,WAAO,IAAD,EAESb,mBAAS,IAFlB,mBAEZc,EAFY,KAEJC,EAFI,KAUnB,OANAZ,qBAAU,WACNC,MAAM,0EACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAIQ,EAAUR,EAAKC,KAAKQ,SAAS,UAC5C,IAGC,yBAAKN,UAAU,YACX,wCACA,uCACA,6CAAmBI,EAAOG,qBAC1B,8CAAoBH,EAAOI,uB,QCdjCC,E,MAAUC,GAAmB,CAC/BC,WAAY,sBA2BDC,EAxBD,WAAO,IAAD,EAEwBtB,mBAAS,IAFjC,mBAETuB,EAFS,KAEKC,EAFL,KAahB,OATArB,qBAAU,WACNgB,EAAQM,gCAAgC,CACpCC,SAAU,UACVC,UAAW,WACZ,KACFtB,MAAK,SAAAG,GAAI,OAAIgB,EAAgBhB,QAChC,IAIE,yBAAKE,UAAU,SACVa,EAAaK,KAAI,SAACC,GAAD,OAClB,kBAAC,EAAD,CAASC,IAAKD,EAAQE,GAAIF,QAASA,SAWzCG,EAAU,SAACC,GAAW,IAAD,EAEyBA,EAAMJ,QAA/CK,EAFgB,EAEhBA,KAAMC,EAFU,EAEVA,eAAgBC,EAFN,EAEMA,gBAE7B,OACI,yBAAK1B,UAAU,WACX,4CACA,4BAAKwB,GACL,6CAAmBC,GACnB,8CAAoBC,KCxBjBC,MAZf,WAEE,OACE,yBAAK3B,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCFc4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7C,MAAK,SAAA8C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.35354327.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Title = () => {\n\n    return <h1>Infoskjerm</h1>;\n\n}\n\nexport default Title;\n","import React, { useEffect, useState } from \"react\";\n\nconst DadJoke = () => {\n\n    const [joke, setJoke] = useState({});\n\n    useEffect(() => {\n        fetch(\"https://www.reddit.com/r/dadjokes/top.json?t=day&limit=1\")\n        .then(response => response.json())\n        .then(json => setJoke(json.data.children[0].data));\n\n    },[]);\n\n\n    return(\n        <div className=\"DadJoke\">\n            <h2>Dad Joke</h2>\n            <p>{joke.title}</p>\n            <p>{joke.selftext}</p>\n        </div>\n    )\n};\n\nexport default DadJoke;","import React, { useEffect, useState } from \"react\";\n\nconst BySykkel = () => {\n\n    const [sykkel, setSykkel] = useState({});\n\n    useEffect(() => {\n        fetch(\"https://gbfs.urbansharing.com/trondheimbysykkel.no/station_status.json\")\n        .then(response => response.json())\n        .then(json => setSykkel(json.data.stations[48]));\n    }, []);\n\n    return(\n        <div className=\"BySykkel\">\n            <h2>Bysykler</h2>\n            <h3>Skansen</h3>\n            <p>Ledige sykler: {sykkel.num_bikes_available}</p>\n            <p>Ledige plasser: {sykkel.num_docks_available}</p>\n        </div>\n    )\n\n}\n\nexport default BySykkel;","import React, { useEffect, useState } from \"react\";\nimport createEnturService from '@entur/sdk'\n\nconst service = createEnturService({\n    clientName: 'grande-infoskjerm'\n});\n\nconst Bikes = () => {\n\n    const [bikeStations, setBikeStations] = useState([]);\n\n    useEffect(() => {\n        service.getBikeRentalStationsByPosition({\n            latitude: 63.430315,\n            longitude: 10.366376\n        }, 500)\n        .then(data => setBikeStations(data));\n    },[]);\n\n\n    return (\n        <div className=\"bikes\">\n            {bikeStations.map((station) => (\n            <Station key={station.id} station={station} />\n            ))}\n        </div>\n    );\n}\n\n\n\nexport default Bikes;\n\n\nconst Station = (props) => {\n\n    const {name, bikesAvailable, spacesAvailable} = props.station;\n\n    return(\n        <div className=\"Station\">\n            <h2>Bysykler 2.0</h2>\n            <h3>{name}</h3>\n            <p>Ledige sykler: {bikesAvailable}</p>\n            <p>Ledige plasser: {spacesAvailable}</p>\n        </div>\n        \n    )\n}","import React from 'react';\nimport './App.css';\nimport Title from './Title';\nimport DadJoke from './DadJoke';\nimport BySykkel from './BySykkel';\nimport Bikes from './Bikes';\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <Title />\n      <DadJoke />\n      <BySykkel />\n      <Bikes />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}